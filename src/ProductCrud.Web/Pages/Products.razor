@page "/products"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using ProductCrud.Web.Models
@using ProductCrud.Web.Services
@inject IApiService ApiService
@using System.Threading
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Rendering
<PageTitle>Products</PageTitle>

<h3>Products</h3>

@if (loading)
{
    <p>Loading products...</p>
}
else
{
    <div class="mb-4 d-flex justify-content-between align-items-center">
        <button class="btn btn-primary" @onclick="() => ShowAddProductModal()">Add New Product</button>

        <div class="input-group w-50">
            <input type="text" class="form-control" placeholder="Search products..."
                   @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearchKeyUp" />
            <button class="btn btn-outline-secondary" type="button" @onclick="PerformSearch">
                <i class="bi bi-search"></i> Search
            </button>
        </div>
    </div>

    @if (products.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th @onclick='() => SortTable(" Id")'>
                        ID
                    </th>
                    <th @onclick='() => SortTable(" Name")'>
                        Name
                    </th>
                    <th @onclick='() => SortTable(" Description")'>
                        Description
                    </th>
                    <th @onclick='() => SortTable(" Price")'>
                        Price
                    </th>
                    <th @onclick='() => SortTable("CreatedAt")'>
                        Created At
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@product.Id</td>
                        <td>@product.Name</td>
                        <td>@product.Description</td>
                        <td>@product.Price.ToString("C")</td>
                        <td>@(product.CreatedAt?.ToShortDateString() ?? "-")</td>
                        <td>
                            <button class="btn btn-sm btn-info me-1" @onclick="() => ShowEditProductModal(product)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteProductConfirmation(product)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-between align-items-center mt-3">
            @*<div>
                <select class="form-select" @bind="pageSize" @onchange="LoadProducts">
                    <option value="5">5 per page</option>
                    <option value="10">10 per page</option>
                    <option value="25">25 per page</option>
                    <option value="50">50 per page</option>
                </select>
            </div>*@
            <div>
                <button class="btn btn-outline-primary me-1" @onclick="PreviousPage" disabled="@(pageIndex == 0)">
                    Previous
                </button>
                <span class="mx-2">Page @(pageIndex + 1)</span>
                <button class="btn btn-outline-primary ms-1" @onclick="NextPage">
                    Next
                </button>
            </div>
        </div>
    }
    else
    {
        <p>No products found.</p>
    }
}

@if (showModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentProduct" OnValidSubmit="SaveProduct">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" @bind-Value="currentProduct.Name" class="form-control" />
                            <ValidationMessage For="@(() => currentProduct.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputText id="description" @bind-Value="currentProduct.Description" class="form-control" />
                            <ValidationMessage For="@(() => currentProduct.Description)" />
                        </div>

                        <div class="mb-3">
                            <label for="price" class="form-label">Price</label>
                            <InputNumber id="price" @bind-Value="currentProduct.Price" class="form-control" />
                            <ValidationMessage For="@(() => currentProduct.Price)" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteConfirmation)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="() => showDeleteConfirmation = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the product '@currentProduct.Name'?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation = false">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteProduct">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Product> products = new();
    private Product currentProduct = new();
    private bool loading = true;
    private bool showModal = false;
    private bool showDeleteConfirmation = false;
    private string modalTitle = "";
    private bool isEditing = false;

    // Pagination parameters
    private int pageIndex = 0;
    private int pageSize = 10;

    // Search and sorting parameters
    private string searchTerm = "";
    private string sortField = "Id";
    private bool sortDescending = false;
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        loading = true;
        products = await ApiService.GetProductsAsync(
            PageIndex: pageIndex,
            PageSize: pageSize,
            SearchTerm: searchTerm,
            SortBy: sortField,
            SortDescending: sortDescending);
        loading = false;
    }

    private async Task PerformSearch()
    {
        pageIndex = 0; // Reset to first page
        await LoadProducts();
    }

    private void HandleSearchKeyUp(KeyboardEventArgs e)
    {
        // Set up a debounce timer for search to avoid too many API calls
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await PerformSearch();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }

    private async Task SortTable(string field)
    {
        if (sortField == field)
        {
            // Toggle sort direction
            sortDescending = !sortDescending;
        }
        else
        {
            // New field, default to ascending
            sortField = field;
            sortDescending = false;
        }

        await LoadProducts();
    }

    private async Task PreviousPage()
    {
        if (pageIndex > 0)
        {
            pageIndex--;
            await LoadProducts();
        }
    }

    private async Task NextPage()
    {
        pageIndex++;
        await LoadProducts();
    }

    private void ShowAddProductModal()
    {
        currentProduct = new Product();
        modalTitle = "Add Product";
        isEditing = false;
        showModal = true;
    }

    private void ShowEditProductModal(Product product)
    {
        currentProduct = new Product
        {
            Id = product.Id,
            Name = product.Name,
            Description = product.Description,
            Price = product.Price,
            CreatedAt = product.CreatedAt
        };
        modalTitle = "Edit Product";
        isEditing = true;
        showModal = true;
    }

    private void DeleteProductConfirmation(Product product)
    {
        currentProduct = product;
        showDeleteConfirmation = true;
    }

    private async Task SaveProduct()
    {
        if (isEditing)
        {
            await ApiService.UpdateProductAsync(currentProduct.Id, currentProduct);
        }
        else
        {
            await ApiService.CreateProductAsync(currentProduct);
        }

        CloseModal();
        await LoadProducts();
    }

    private async Task DeleteProduct()
    {
        await ApiService.DeleteProductAsync(currentProduct.Id);
        showDeleteConfirmation = false;
        await LoadProducts();
    }

    private void CloseModal()
    {
        showModal = false;
    }
}

@code {
    // A component to display sorting indicator
    public class SortIndicator : ComponentBase
    {
        [Parameter] public string Field { get; set; } = "";
        [Parameter] public string CurrentSortField { get; set; } = "";
        [Parameter] public bool IsDescending { get; set; } = false;

        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            if (Field == CurrentSortField)
            {
                builder.OpenElement(0, "span");
                builder.AddAttribute(1, "class", "ms-1");
                builder.AddContent(2, IsDescending ? "▼" : "▲");
                builder.CloseElement();
            }
        }
    }
}
